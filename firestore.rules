rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function getData(table, id) {
      return get(/databases/$(database)/documents/$(table)/$(id))
    }

    function getRole(rsc) {
      return rsc.data.acl[request.auth.uid];
    }

    function isOneOfRoles(rsc, array) {
      return isSignedIn() && (getRole(rsc) in array);
    }

    function preservesRoles(rsc) {
      return  request.resource.data.acl == rsc.data.acl;
    }

    function writeAclZ(rsc) {
      return (isOneOfRoles(rsc, ['write']) && preservesRoles(rsc)) || isOneOfRoles(rsc, ['admin']);
    }

    function readAclZ(rsc) {
      return isOneOfRoles(rsc, ['read', 'write', 'admin']);
    }

    function campaignReader(rsc) {
      return readAclZ(get(/databases/$(database)/documents/campaigns/$(rsc.campaign)));
    }

    function createAclCheck() {
      return request.resource.data.acl[request.auth.uid] == 'admin' && request.resource.data.acl.size() == 1;
    }

    match /users/{userId} {
      allow read: if isSignedIn()
      allow write: if request.auth.uid == request.resource.data.id
      match /messages/{messageId} {
        allow read: if writeAclZ(getData('users', userId))
        allow write: if readAclZ(getData('users', userId))
      }
    }

    match /characters/{characterId} {
      allow read: if readAclZ(resource)
      allow update: if writeAclZ(resource)
      allow create: if isSignedIn() && createAclCheck()

      match /messages/{messageId} {
        allow read: if writeAclZ(getData('characters', characterId))
        allow write: if readAclZ(getData('characters', characterId))
      }
    }

    match /campaigns/{campaignId} {
      allow read: if readAclZ(resource)
      allow update: if writeAclZ(resource)
      allow create: if isSignedIn() && createAclCheck()

      match /characters/{characterId} {
        allow create: if readAclZ(getData('campaigns', campaignId)) && createAclCheck()
        allow update: if writeAclZ(resource) || writeAclZ(getData('campaigns', campaignId))
        allow read: if readAclZ(getData('campaigns', campaignId))
        allow delete: if false
      }

      match /rolls/{rollId} {

        function eventWriter() {
              // the campaign owner can close the event
          return writeAclZ(getData('campaigns', campaignId)) 
              // the requester can close the event
            || request.resource.data.requester == request.auth.uid 
              // the player can close the event
            || get(/databases/$(database)/documents/campaigns/$(campaignId)/characters/$(request.resource.data.roller)).acl[request.auth.uid] == 'admin';
        }

        allow create: if readAclZ(getData('campaigns', campaignId)) && request.data.requester == request.auth.uid
        allow update: if eventWriter() || writeAclZ(getData('campaigns', campaignId))
        allow read: if readAclZ(getData('campaigns', campaignId))
        allow delete: if false;
      }
    }

    match /rules/{document=**} {
      allow read: if isSignedIn()
      allow write: if false
    }

    match /{document=**} {
      allow read, write: if false
    }
  }
}