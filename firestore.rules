rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function getData(table, id) {
      return get(/databases/$(database)/documents/$(table)/$(id))
    }

    function getRole(rsc) {
      return rsc.data.acl[request.auth.token.email];
    }

    function isOneOfRoles(rsc, array) {
      return isSignedIn() && getRole(rsc) != null && (getRole(rsc) in array);
    }

    function preservesRoles(rsc) {
      return  request.resource.data.acl == rsc.data.acl;
    }

    function writeAclZ(rsc) {
      return (isOneOfRoles(rsc, ['write']) && preservesRoles(rsc)) || isOneOfRoles(rsc, ['admin']);
    }

    function readAclZ(rsc) {
      return isOneOfRoles(rsc, ['read', 'write', 'admin']);
    }

    function campaignReader(rsc) {
      return readAclZ(get(/databases/$(database)/documents/campaigns/$(rsc.data.campaign)));
    }

    function createAclCheck() {
      return request.resource.data.acl[request.auth.token.email] == 'admin' && request.resource.data.acl.size() == 1;
    }

    match /users/{userId} {
      allow read: if isSignedIn()
      allow write: if request.auth.token.email == request.resource.data.email
      match /messages/{messageId} {
        allow read: if writeAclZ(getData('users', userId))
        allow write: if readAclZ(getData('users', userId))
      }
    }

    match /characters/{characterId} {
      allow read: if readAclZ(resource) || campaignReader(resource)
      allow update: if writeAclZ(resource)
      allow create: if isSignedIn() && createAclCheck()

      match /messages/{messageId} {
        allow read: if writeAclZ(getData('characters', characterId))
        allow write: if readAclZ(getData('characters', characterId))
      }
    }

    match /rolls/{rollId} {
      allow create: if writeAclZ(getData('campaigns', request.resource.data.campaign))
      allow update: if writeAclZ(getData('campaigns', request.resource.data.campaign)) 
        || writeAclZ(getData('characters', request.resource.data.roller))
      allow read: if campaignReader(resource)
      allow delete: if false;
    }

    match /campaigns/{campaignId} {
      allow read: if readAclZ(resource)
      allow update: if writeAclZ(resource)
      allow create: if isSignedIn() && createAclCheck()
    }

    match /rules/{document=**} {
      allow read: if isSignedIn()
      allow write: if false
    }

    match /{document=**} {
      allow read, write: if true
    }
  }
}